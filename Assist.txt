Rubrics:
Assessment Criteria for Assignment (Group Project) (40%)
Group Assignment involves the submission of programming code and report for grading, oral
presentation. The breakdown of assessment components is as follows.
• Correctness and completeness of Class and Sequence Diagram design, Design consideration
and coding (50%)
• Quality of demonstration presentation (20%)
• Report (10%)
• Individual Q&A (20%)
Assessment
Criteria for
Assignment
(Group Project)
Standards
Fail standard
(0-39%)
Pass standard
(40-74%)
High standard
(75-100%)
Correctness and
completeness
of Class and
Sequence
Diagram design,
Design
consideration
and coding (LO
1, 2, 3)
The depicted diagrams
given contain serious
design and logical flaws,
showing
misunderstanding of the
basic concepts or design
principles. The
implementation of the
design contains bugs
that prevent the
program to run
correctly. Result of the
empirically complexity
analysis of the problem
shows the design lack in
reusability,
maintainability, and
extensibility.
The depicted diagrams
are mostly correct, except
for some details in the
derivation. The
implementation runs
smoothly (although some
minor components need
be added or debugged, or
the efficiency can be
improved). Results of the
empirically complexity
analysis of the problem
shows the design
consideration cater for
either 2 of reusability,
maintainability, and
extensibility.
The depicted diagrams
show thorough and deep
understanding of the key
concepts and techniques.
Design principle applied
and consideration made
are correct.
The implementation of the
design in real code runs
correctly and efficiently on
different input and
parameters. Results of
empirical analysis of the
problem shows the design
consideration cater for
reusability, maintainability
and extensibility.
Furthermore, students can
run extra miles to gain
novel insights into future
enhancement and merits
of their design.
Quality of
demonstration
presentation
(LO 1, 2, 3)
The presentation is
disorganized, with
insufficient content. The
computer program fails
to run or crashes during
the demo. The speaker
reads aloud from the
slides or notes. The
student shows lack of
knowledge or
confidence and needs
much help from other
students. The
demonstration lacks
logical flow for audience
better understanding.
The presentation covers
the essential parts of a
project. It is overall well
organized. The speaker
can speak clearly,
although needs some
rehearsal to improve the
presentation. Some
grammatical errors
appear in the spoken
language. The
demonstration is
organised with most
features explained.
The presentation is well-
organised, comprehensive,
and balanced in content.
The speaker can capture
the essential points of a
problem and describe their
methods and results clearly
and precisely. The
demonstration is succinct
with logical flow to
illustrate all required
features with clear
explanation of ideas.
Quality of
Report
(LO 1, 2)
The content of report is
insufficient to cover the
required components.
The writing is sketchy,
contains numerous
grammatical or
typographical errors.
The logical structure is
shaky, e.g. the
conclusion cannot be
supported by evidence
given.
The content contains
most of the required
components. The writing
is comprehensible but
contains some errors or
ambiguity. The report
may miss out crucial
information and should
give more space for
relatively more important
parts. Some proofreading
and revision may be
needed to improve the
quality of writing.
The content is not only
correct and complete, but
also well-written (e.g.
logical, coherent, clear).
The structure of the report
is logically well organized
and balanced. There are
almost no grammatical or
typographical errors.
Figures and tables are
presented with clarity and
useful information.
Individual Q&A Student is unable to
respond appropriately
to inquiries during the
engagement with the
examiner. Explanations
demonstrate weak
understanding.
Student can respond
appropriately to inquiries
and seek clarification
when needed during the
engagement with the
examiner. Explanations
are concise,
demonstrating
reasonable depth of
understanding.
Student can adapt
responses to audience’s
needs and encourage
interactivity during the
engagement with the
examiner. Explanations are
persuasive, demonstrating
in-depth understanding.
---
Week 14 Group Project Submission & Oral Presentation
���� Guidelines and Marking Rubrics
This document provides expectations for your final group project submission and oral
presentation. Your evaluation will be based not only on the functionality of your system
but also on how well you demonstrate design thinking, team collaboration, OOD
principles, and communication skills.
������ Part A: File Submission
Due: [One day before your oral]
Submission Platform: [NTULearn]
���� Submission Checklist
�� Final written report (Word or PDF)
�� Source code and README
�� UML diagrams (Class & Sequence)
�� Javadoc
Combine all required files into a single ZIP archive and submit it as a group via
NTULearn.
�� Report Guidelines
Please refer to report guideline for details.
��� Part B: Oral Presentation
Date: [Any date on or before April 25, 2025]
Duration: up to 15 minutes + Q&A (2–3 minutes)
All members must take turn to present. Please arrange the oral date, time, and
mode (online/offline) with your TA.
�� Presentation Guidelines
Each group must deliver a concise and professional presentation that includes:
Presentation
Segment Description
Introduction & Team
Roles
Briefly introduce the problem, the team, and individual
contributions.
Feature Walkthrough Demonstrate core system functionality and user interface.
Design & OOD
Justification
Explain key design decisions, class interactions, and how you
applied SOLID principles.
Testing Overview Highlight how your team ensured correctness and
completeness using meaningful test cases.
---
Report Guideline:
OODP Group Project Report guidelines
Project Title:
E.g.: “Smart Parking System” or “Student Course Registration Portal”
�� Group Members:
Name Student ID Role (Optional)
Alice Tan U1234567A Project Manager
Bob Lee U1234567B Lead Developer
Chen Mei U1234567C UML Designer
David Koh U1234567D Tester/Documentation Lead
��������� ��� Chapter 1: Requirement Analysis & Feature Selection
Guidelines for Students: Emphasizing Analytical Thinking
This chapter focuses on how your team analyzed the BTO project specification and
decided on the features and scope of your project. It should showcase your
understanding of the problem, as well as the reasoning behind your decisions.
1.1 Understanding the Problem and Requirements
Start by reflecting on how your team carefully read and dissected the Week 8 document.
�� Your report should address:
• How did you identify the main problem domain?
• What explicit requirements were given? (e.g., user login, admin functions)
• What implicit expectations did your team infer from the context?
• Were there any ambiguous or missing parts? How did you interpret or resolve
them?
�� Prompt to write:
“We began by reading through the BTO document line-by-line, highlighting all use cases
and system requirements. Based on this, we created a list of essential features and
identified user roles and system entities…”
1.2 Deciding on Features and Scope
Explain how your team used your analysis to decide which features would be
implemented.
������� Your report should include:
• A full list of all potential features you identified.
• How your team prioritized them based on importance, feasibility, and timeline.
• A clear distinction between:
o �� Core features (essential, must implement)
o � Optional or bonus features (nice to have, only if time permits)
o � Excluded features, and why they were left out
�� Prompt to write:
“We grouped features into three categories: core, optional, and excluded. Our goal was
to ensure that the core features demonstrated strong object-oriented principles without
making the system overly complex…”
������� Chapter 2: System Architecture & Structural Planning
Guidelines for Students: Emphasizing Design Thinking
This chapter focuses on how you designed your system’s structure after finalizing the
functional scope. It should demonstrate the thought process behind your technical
decisions, especially how you applied object-oriented thinking in early planning
stages.
2.1 Planning the System Structure
Explain how you designed the overall system layout before implementation.
����������� Your report should describe:
• How you broke down the system into logical components.
• How you modeled user flows or mapped use cases to system structure before
finalizing your class diagram.
• How you created early visual models such as Flowcharts to show step-by-step
process logic
2.2 Reflection on Design Trade-offs
Briefly reflect on the decisions and compromises made during planning.
��� Your report should answer:
• What trade-offs did you consider (e.g., simplicity vs. extensibility)?
• Did your team debate certain approaches before agreeing on a design?
�� Prompt to write:
“We considered combining the controller and logic layer to simplify the codebase, but
ultimately separated them to promote maintainability and allow for better testing…”
�� Summary Checklist for These Chapters
��� For Chapter 1:
• Did you describe how you interpreted the BTO document?
• Did you explain your feature selection and prioritization process?
• Did you justify which features were excluded?
��� For Chapter 2:
• Did you outline your system structure and planned architecture?
• Did you reflect on the design trade-offs or evolution of ideas?
• Did you focus on your thinking process, not just the final result?
�� 3. Object-Oriented Design
3.1 Class Diagram (with Emphasis on Thinking Process):
This section is not just about drawing a UML diagram, but about clearly articulating how
the team translated the problem domain into a logical object-oriented model.
���� Design Thinking Process:
Before presenting the diagram, include a written reflection addressing the following:
• How were the main classes identified?
E.g., Based on nouns in the problem description, user roles, entities in use
cases.
• What are the responsibilities of each class?
• How were relationships (inheritance, association, aggregation) determined?
Describe your reasoning when deciding:
o "Should this be an attribute or its own class?"
o "Is this an is-a or has-a relationship?"
• What trade-offs were considered?
E.g., Simplicity vs. flexibility, abstraction vs. performance, etc.
���������� Final Output:
• Present the UML Class Diagram showing:
o Class names
o Key attributes and methods
o Visibility indicators (+, -, #)
o Relationships: inheritance, composition, aggregation, association
• Diagram must be created using a tool and submit the high-resolution file
separately.
Include a UML class diagram showing main classes, attributes, methods, relationships
(inheritance, composition, etc.)
3.2 Sequence Diagrams (with Emphasis on Thinking Process)
Sequence diagrams illustrate how objects interact over time to fulfill a particular use
case. They are a vital tool to show how your system behaves dynamically and ensure
that your class design supports real user interactions.
���� Design Thinking Process: Why These Diagrams?
Before drawing the diagrams, the team should reflect and document their thinking
process behind the selection:
• What are the most important or complex use cases in your system?
(E.g., ones involving multiple objects, database access, conditional logic)
• Do these scenarios exercise the most critical parts of your system architecture?
Your choices should not be arbitrary — the use cases selected should show:
o How users interact with the core features
o How your controller-service-repository layers interact
o How different objects collaborate to fulfill tasks
• What types of patterns or logic are worth demonstrating?
For example:
o Authentication flow
o Search and filter logic
o Report generation with file output
o Role-based access control
������ Required: 2–3 Sequence Diagrams with Justification
Each diagram must include a short justification paragraph that answers:
“Why did we choose this scenario to represent? What does it help us validate or
communicate about our design?”
3.3 Application of OOD Principles (SOLID) — With Emphasis on Thinking Process
Applying object-oriented principles is not about blindly following rules — it’s about
thinking critically to create a design that is clear, modular, maintainable, and extensible.
This section serves as a structured reflection. For each principle in SOLID, you are
expected to:
• Choose one meaningful and context-relevant example from your own project.
• Explain why you chose to apply the principle there.
• Reflect on how applying the principle improved your design — or what trade-offs
were involved.
You are not required to ensure that every single class follows every principle. Instead,
your goal is to show that you understand each principle well enough to apply it
intentionally and explain your reasoning.
������ 4. Implementation (Java)
4.1 Tools Used:
• Java 17
• IDE: IntelliJ / Eclipse
• Version control: GitHub
4.2 Sample Code Snippets:
Show parts that demonstrate:
• Encapsulation
• Inheritance
• Polymorphism
• Interface use
• Error handling
����� Chapter 5: Testing
Guidelines for Students: Demonstrating Functional Validation
Testing is essential to ensure your system works as intended. This section should document
your team’s testing strategy, and include a well-organized list of test cases that reflect the
actual functionality you implemented.
5.1 Test Strategy
Briefly describe how your team approached testing the system.
����� Your report should mention:
• What type(s) of testing you used (e.g., unit testing, manual functional testing)
• Tools used (if any)
5.2 Test Case Table
You should include a complete table of test cases, with sufficient variety to cover your
system's key functionalities. You are encouraged to propose new or revised test cases if:
• Your system includes additional or modified features not in the original Week 8
document
• You made changes to workflows or flows that affect system behavior
• You want to demonstrate deeper understanding by testing edge cases, failures, or
alternative paths
�� Do not just copy and paste original test cases. Reflect what your system actually
does.
�� Summary Checklist for This Section
• Did you describe your testing approach and tools used?
• Did you review and update test cases based on what your system actually
implements?
• Did your test cases include a variety of scenarios (valid, invalid, edge cases)?
• Did your test cases demonstrate understanding of the feature behaviors?
������������ 6. Documentation
6.1 Javadoc :
�� All public classes/methods documented with Javadoc
�� HTML Javadoc files generated and included
6.2 Developer Guide:
How to set up the environment and build the project.
��� 7. Reflection & Challenges
• What went well
• What could be improved
• Individual contributions
• Lessons learned about OODP
������� 8. Appendix
• GitHub link (if any)
• References (if any external libraries/tools used)
Separate submissions (zip everything in a zip file):
• Full UML diagrams
• Source code
---
Assignment:
SC/CE/CZ2002: Object-Oriented Design & Programming
ASSIGNMENT
Building an OO Application
2024/2025 SEMESTER 2
COLLEGE OF COMPUTING AND DATA SCIENCE (CCDS)
NANYANG TECHNOLOGICAL UNIVERSITY
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
1. OBJECTIVES
The main objective of this assignment is
• to apply the Object-Oriented (OO) concepts you have learnt in the course,
• to model, design and develop an OO application.
• to gain familiarity with using Java as an object-oriented programming
language.
• to work collaboratively as a group to achieve a common goal.
2. LABORATORY
Assigned SCSE lab.
3. EQUIPMENT
Hardware: PC (or Laptop)
Software: Your preferred Java IDE or simply notepad and Java
Development ToolKits (JDK)
4. THE ASSIGNMENT
The assignment for your group will be to design and develop a:
Build-To-Order (BTO) Management System
BTO Management System is a system for applicants and HDB staffs to view,
apply and manage for BTO projects.
The following are information about the system:
Overview of the System:
• The system will act as a centralized hub for all applicants and HDB staffs
• All users will need to login to this hub using their Singpass account.
o User ID will be their NRIC, that starts with S or T, followed by 7-
digit number and ends with another letter
o Assume all users use the default password, which is password.
o A user can change password in the system.
o Additional Information about the user: Age and Marital Status
• A user list can be initiated through a file uploaded into the system at
initialization.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
User’s capabilities:
1. Applicant
• Can only view the list of projects that are open to their user group (Single
or Married) and if their visibility has been toggled “on”.
• Able to apply for a project – cannot apply for multiple projects.
o Singles, 35 years old and above, can ONLY apply for 2-Room
o Married, 21 years old and above, can apply for any flat types (2-
Room or 3-Room)
• Able to view the project he/she applied for, even after visibility is turned
off, and the application status
o Pending: Entry status upon application – No conclusive decision
made about the outcome of the application
o Successful: Outcome of the application is successful, hence invited
to make a flat booking with the HDB Officer
o Unsuccessful: Outcome of the application is unsuccessful, hence
cannot make a flat booking for this application. Applicant may apply
for another project.
o Booked: Secured a unit after a successful application and completed
a flat booking with the HDB Officer.
• If Application status is “Successful”, Applicant can book one flat
through the HDB Officer (Only HDB Officer can help to book a flat) -
cannot book more than one flat, within a project or across different
project
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
• Allowed to request withdrawal for their BTO application before/after flat
booking
• Able to submit enquiries, a string, regarding the projects.
• Able to view, edit, and delete their enquiries.
2. HDB Officer
• HDB Officer possess all applicant’s capabilities.
• Able to register to join a project if the following criteria are meant:
o No intention to apply for the project as an Applicant (Cannot apply
for the project as an Applicant before and after becoming an HDB
Officer of the project)
o Not a HDB Officer (registration not approved) for another project
within an application period (from application opening date,
inclusive, to application closing date, inclusive)
• Able to see the status of their registration to be a HDB Officer for a
project
• Registration to be a HDB Officer of the project is subject to approval
from the HDB Manager in charge of the project.
Once approved, their profile will reflect the project he/she is a HDB
Officer for.
• Able to apply for other projects in which he/she is not handling – Once
applied for a BTO project, he/she cannot register to handle the same
project
• Able to view the details of the project he/she is handling regardless of
the visibility setting.
• Not allowed to edit the project details.
• Able to view and reply to enquiries regarding the project he/she is
handling
• With Applicant’s successful BTO application, HDB Officer’s flat
selection responsibilities:
 Update the number of flat for each flat type that are remaining
 Retrieve applicant’s BTO application with applicant’s NRIC
 Update applicant’s project status, from “successful” to
“booked”.
 Update applicant’s profile with the type of flat (2-Room or 3-
Room) chosen under a project
• Able to generate receipt of the applicants with their respective flat
booking details – Applicant’s Name, NRIC, age, marital status, flat type
booked and its project details.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
3. HDB Manager
• Able to create, edit, and delete BTO project listings.
• A BTO project information entered by the HDB Manager will include
information like:
o Project Name
o Neighborhood (e.g. Yishun, Boon Lay, etc.)
o Types of Flat – Assume there are only 2-Room and 3-Room
o The number of units for the respective types of flat
o Application opening date
o Application closing date
o HDB Manager in charge (automatically tied to the HDB Manager
who created the listing)
o Available HDB Officer Slots (max 10)
• Can only be handling one project within an application period (from
application opening date, inclusive, to application closing date,
inclusive)
• Able to toggle the visibility of the project to “on” or “off”. This will be
reflected in the project list that will be visible to applicants.
• Able to view all created projects, including projects created by other
HDB Manager, regardless of visibility setting.
• Able to filter and view the list of projects that they have created only.
• Able to view pending and approved HDB Officer registration.
• Able to approve or reject HDB Officer’s registration as the HDB
Manager in-charge of the project – update project’s remaining HDB
Officer slots
• Able to approve or reject Applicant’s BTO application – approval is
limited to the supply of the flats (number of units for the respective flat
types)
• Able to approve or reject Applicant's request to withdraw the application.
• Able to generate a report of the list of applicants with their respective
flat booking – flat type, project name, age, marital status
o There should be filters to generate a list based on various categories
(e.g. report of married applicants’ choice of flat type)
• Cannot apply for any BTO project as an Applicant.
• Able to view enquiries of ALL projects.
• Able to view and reply to enquiries regarding the project he/she is
handling.
Miscellaneous:
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
• All users can use filters to view project (location, flat types, etc.) Assume
that default is by alphabetical order. User filter settings are saved when
they switch menu pages.
The system is to be developed as a Command Line Interface (CLI) application
(Non-Graphical User Interface).
The sample data file for user list is given in excel in assignment folder. You
can
• Use them directly,
• Or copy the content to text file if you plan to read from text file,
• Or make your own data files.
But No database application (e.g. MySQL, MS Access, etc) is to be used.
No JSON or XML is to be used.
5. THE REPORT
Your report will include the following:
a) A detailed UML Class Diagram for the application (exported as an
image)
• Show clearly the class relationship, notation
• Notes to explain, if necessary
• Annotate your UML diagram to highlight where specific OO
principles (e.g., encapsulation, polymorphism) are applied.
b) A detailed UML Sequence Diagram (exported as an image)
• Showing the flow of the HDB Officer’s role in applying for a BTO
and register to handle a project.
• The diagram should show clearly all participating objects involved
with sufficient detailed flow and relevant interaction fragments.
c) Highlight clearly any additional features/functionalities implemented
in the system.
d) Based on the concepts learned in the lecture, write-up on your design
considerations and use of OO concepts in your current design,
extensibility and maintainability of your design. Discuss any trade-offs
you made in your design and reflect on how the design patterns you used
contribute to the overall system design. Were there alternative patterns
you considered? Why did you choose the ones you did?
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
e) Reflection: The difficulties encountered and the way to conquer, the
knowledge learnt from this course, further improvement suggestions.
Strong demonstration of learning points and insights of good design and
implementation practices, based on experience gained from doing the
assignment.
f) Include the link to your GitHub repository used for this project,
containing all the relevant files and code.
g) A duly signed Declaration of Original Work form (Appendix B)
h) By default, every group member receives an equal mark. However, if
your group feels that contributions vary and you wish to assign marks
based on individual input, please complete the WBS.xls (located in the
same folder as the assignment document) and include it in your report.
All members must agree to the contents of the WBS. Additionally, you
must email the completed WBS.xls to the course coordinator, ensuring
that all members are copied on the email.
6. DEMOSTRATION & PRESENTATION (Deadline: Week 14
Friday, 11:59pm)
Your group is required to present your work to your TA to demonstrate the
working of the application – presenting ALL the required functionalities of the
application. It is advised that you planned your demonstration in a story-
boarding flow to facilitate understanding of your application. Please introduce
your members and group number at the start of presentation, all the group
members must take turn to present. The presenter should show his/her face
while presenting.
In the production, you may include:
a) Explaining essential and relevant information about the application
b) Run-through and elaborate on essential part/s of your
implementation/coding
• The presentation duration must not exceed 15 minutes in total.
• The font size used must be large enough to be readable and viewable.
• The demo of the application is to be done in real-time and NOT pre-
run display.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
• The presentation can be conducted either through online meeting or
physically.
**You will create your own test cases and data to test your application
thoroughly.
7. THE DELIVERABLE (Deadline: One day before your
scheduled oral presentation with your TA)
Your group submission should include the following:
a. The report (separate diagram file if diagram is unclear in report)
b. All implementation codes and java documentation (Javadoc).
c. Other relevant files (e.g. data files, setup instruction, etc.)
8. ASSESSMENT WEIGHTAGE
UML Class Diagram [25 Marks]
• Show mainly the Entity classes, the essential Control and Boundary classes,
and enumeration type (if there is).
• Clarity, Correctness and Completeness of details and relationship.
UML Sequence Diagram [20 Marks]
• Show only the sequence Diagram mentioned in 5(b)
• Clarity, Correctness and Completeness of flow and object interactions
details (Boundary-Control-Entities)
Design Consideration [15 Marks]
• Usage of OO concepts and principle - correctness and appropriateness
• Explanation of design choices and how it fits the project requirements
• Coupling and cohesion of classes
Implementation Code [20 Marks]
• Diagram to Code correctness, readability, Java naming convention,
exception handling, completeness of Java Doc and overall quality.
• Creativity of the additional features/functionality added to the system.
- A Java API HTML documentation of ALL your defined classes using
Javadoc must be submitted. The use of javadoc feature is documented in
Appendix D.
Demonstration and report [20 Marks]
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
• Coverage of application essentials and functionalities, user friendliness,
demo flow, innovation.
• Report structure and reflection
• Highlight clearly any additional features implemented in the system.
9. SUBMISSION
This is a group assignment, and one submission from each group.
Report format guidelines are provided in the Appendix C below.
1. Soft copy of your deliverables to be uploaded to your individual
SC/CE/CZ2002 LAB site (e.g. FEP1, FSP1, etc.) in NTULearn. The link
is provided on the left panel "Assignment Submission".
File name convention : <lab_grp>-grp<assignment_grp#>.<ext> E.g.,
FEP2- grp3.pdf [<ext.> can be pdf, doc, zip,]
2. DEADLINE: One day before your scheduled oral presentation with your
TA.
Important:
Note that THREE (3) marks will be deducted for the delay submission of
each calendar day. Lateness is based on the date the captured in
NTULearn or subsequent resubmissions (whichever is later). So check
your work before submitting.
10.REFERENCES & TOOLS
• UML Diagrams tool - Visual Paradigm
http://www.visual-paradigm.com/
http://www.visualparadigm.com/support/documents/vpuserguide/94/2576/71
90_drawingclass.html
• NTULearn Cx2002 main course site content
• NTULearn Cx2002 course site content on “File Input/Output”
• Object Serialization tutorial
http://www.javabeginner.com/uncategorized/javaserialization
• Windows Media Encoder (a suggestion)
http://www.microsoft.com/expression/products/EncoderPro_Overview.aspx
[ You can also try with the video recording feature for gaming in Windows
10 – press ‘Windows key + G’ ]
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
APPENDIX A:
You may refer to the list of sample test cases below as a guide for your testing and
demo video. Depending on your design and user-friendliness of your data entries
process, there may be multiple steps taken.
The test cases provided are intended as examples. You are encouraged to develop your
own test cases to thoroughly validate your system.
No. Test Cases Expected Behavior Failure Indicators
1 Valid User Login User should be able to
access their dashboard
based on their roles
User cannot log in or
receives incorrect
error messages
2 Invalid NRIC Format User receives a
notification about
incorrect NRIC format
User is allowed to log
in with an invalid
NRIC
3 Incorrect Password System should deny
access and alert the
user to incorrect
password
User logs in
successfully with a
wrong password
4 Password Change
Functionality
System updates
password, prompt re-
login and allows login
with new credentials
System does not
update the password
or denies access with
the new password
5 Project Visibility Based
on User Group and
Toggle
Projects are visible to
users based on their
age, marital status and
the visibility setting
Users see projects not
relevant to their group
or when visibility is
off
6 Project Application Users can only apply
for projects relevant to
their group or when
visibility is off
Users can apply for
projects not relevant
to their group or when
visibility is off
7 Viewing Application
Status after Visibility
Toggle Off
Applicants continue to
have access to their
application details
regardless of project
visibility.
Application details
become inaccessible
once visibility is off.
8 Single Flat Booking per
Successful Application
System allows
booking one flat and
restricts further
bookings
Applicant is able to
book more than one
flat
9 Applicant’s enquiries
management
Enquiries can be
successfully
submitted, displayed,
modified, and
removed.
Enquiries cannot be
submitted, edited, or
deleted; or do not
display correctly.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
10 HDB Officer Registration
Eligibility
System allows
registration only under
compliant conditions
System allows
registration while the
officer is an applicant
or registered for
another project in the
same period
11 HDB Officer Registration
Status
Officers can view
pending or approved
status updates on their
profiles.
Status updates are not
visible or incorrect
12 Project Detail Access for
HDB Officer
Officers can always
access full project
details, even when
visibility is turned off.
Project details are
inaccessible when
visibility is toggled
off
13 Restriction on Editing
Project Details
Edit functionality is
disabled or absent for
HDB Officers.
Officers are able to
make changes to
project details
14 Response to Project
Enquiries
Officers & Managers
can access and
respond to enquiries
efficiently.
Officers & Managers
cannot see enquiries,
or their responses are
not recorded.
15 Flat Selection and
Booking Management
Officers retrieve the
correct application,
update flat availability
accurately, and
correctly log booking
details in the
applicant’s profile.
Incorrect retrieval or
updates, or failure to
reflect booking details
accurately.
16 Receipt Generation for
Flat Booking
Accurate and complete
receipts are generated
for each successful
booking
Receipts are
incomplete,
inaccurate, or fail to
generate
17 Create, Edit, and Delete
BTO Project Listings
Managers should be
able to add new
projects, modify
existing project
details, and remove
projects from the
system
Inability to create,
edit, or delete projects
or errors during these
operations.
18 Single Project
Management per
Application Period
System prevents
assignment of more
than one project to a
manager within the
same application
dates.
Manager is able to
handle multiple
projects
simultaneously during
the same period.
19 Toggle Project Visibility Changes in visibility
should be reflected
Visibility settings do
not update or do not
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
accurately in the
project list visible to
applicants
affect the project
listing as expected
20 View All and Filtered
Project Listings
Managers should see
all projects and be able
to apply filters to
narrow down to their
own projects.
Inability to view all
projects or incorrect
filtering results
21 Manage HDB Officer
Registrations
Managers handle
officer registrations
effectively, with
system updates
reflecting changes
accurately.
Mismanagement of
registrations or slot
counts do not update
properly.
22 Approve or Reject BTO
Applications and
Withdrawals
Approvals and
rejections are
processed correctly,
with system updates to
reflect the decision
Incorrect or failed
processing of
applications or
withdrawals
23 Generate and Filter
Reports
Accurate report
generation with
options to filter by
various categories.
Reports are
inaccurate,
incomplete, or
filtering does not
work as expected.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
APPENDIX B:
Declaration of Original Work for SC2002 Assignment
We hereby declare that the attached group assignment has been researched,
undertaken, completed, and submitted as a collective effort by the group members
listed below.
We have honored the principles of academic integrity and have upheld Student Code
of Academic Conduct in the completion of this work.
We understand that if plagiarism is found in the assignment, then lower marks or no
marks will be awarded for the assessed work. In addition, disciplinary actions may be
taken.
Name Course Lab Group Signature / Date
Important notes:
1. Name must EXACTLY MATCH the one printed on your Matriculation Card.
2. Student Code of Academic Conduct includes the latest guidelines on usage of
Generative AI and any other guidelines as released by NTU.
SC/CE/CZ2002 Object-Oriented Design & Programming Assignment
APPENDIX C:
Report requirement
1. Format:
For the main content, please use Times New Roman 12 pt font size and 1.5 line
spacing. You may choose to use other fonts (e.g., Courier New) for code segments.
Please use the following report structure:
• Cover page: Declaration of original work (Appendix B)
• Design Considerations
o Approach taken, Principles used, Assumptions made, etc.
o Optional: You can show the important code segment
(e.g., a method or a few lines of code) and necessary illustrations to
explain your solution.
• Detailed UML Class Diagram.
o Further Notes, if needed
• Detailed UML Sequence Diagram of stated function.
o Further Notes, if needed
• Testing.
o Test Cases and Results
• Reflection.
o The difficulties encountered and the way to conquer, the knowledge
learnt from this course, further improvement suggestion.
2. Length:
The report should be at most 12 pages from cover to cover including diagrams/Testing
results/references/appendix, if there is any. If you could well present your work in
fewer than 12 pages, you are encouraged to do so.
DO NOT include source code in the report but instead store the source code in a folder.
You are to ensure that the diagrams are readable and clear to the reader. [You can save
the diagrams as image files and include in a folder]
---
Assignment FAQ:
SC/CZ/CE2002 Object-Oriented Design & Programming
Assignment FAQ
Dr. Li Fang
Senior Lecturer, CCDS
FAQ on 1 April, 2025
Q: I noticed that the assignment PDF specifies, "No
database application (e.g., MySQL, MS Access, etc.) is to
be used." I would like to clarify whether storing and
reading data from Excel files (.xlsx) or text files (.txt) is
allowed for the SC2002 BTO assignment.
Ans: Yes. storing and reading data from csv, Excel files (.xlsx) or text files (.txt)
are allowed.
Q: For the filtering of flat type, project , let's say we filter
by room, does that mean 2 room / 2 room / 3 room
descending, or must we have the option to filter by 2
rooms and 3 rooms?
Ans: filter by roomtype means just showing the results of that specific roomtype
(so if we filter by 2 rooms, then it shows only 2 room flats. Filtering by 2
rooms/3 rooms is a must to have feature. Sort descending can be your
additional feature.
Q: For the withdrawal request, is it only made after the
application?
What happens if the withdrawal request is unsuccessful?
Ans: Assume it is always successful. Although “Manager is able to approve or reject
Applicant's request to withdraw the application in case of special situation. But normally,
withdrawal is always successful.
Q: Regarding the UML sequence diagram for the assignment, I would like
to clarify whether "Showing the flow of the HDB Officer's role in applying
for a BTO".
Does this mean that we are supposed to show the HDB Officer applying
for a BTO as an applicant? Or does this mean we are supposed to show
the HDB Officer handling the BTO application created by another
applicant, as an officer?
Ans: Based on the assignment details and your design, draw a sequence
diagram of the HDB's officer's own application - starting from eligibility check to
successfully booked.
QThe second part should be applying to register as a HDB officer for a
project through the HDB manager.
Ans: The sequence diagram should also include the HDB's officer registration
process to handle a project, that he has not applied to be applicant - starting
from eligibility check to successfully registered to be a HDB officer of a project.
The sequence diagram no need to include their responsibilities such as updating
Applicant's status to "Booked", etc.
Q: According to the requirements of the project guideline, I need to
submit UML (class and sequence diagram) in picture format. Then the
project report needs to be a PDF within 12 pages. However, the number
of UML pictures in the design is very large. If I put them in the PDF, I am
afraid that it will not fit in 12 pages. Should I use a separate folder to
include these UML pictures in picture format?
Ans: Separate submission for UML diagram.
Q: Is it true that every applicant can submit an enquiry to ask about any
projects, regardless of whether they have applied to a project or not?
Ans: Applicants are able to enquiry to ask about any projects he/she can view.
Yes, regardless if he/she have applied to the project already or not.
Q: How do we know which are the interactions for which we need to draw
a sequence diagram?
Ans: Basic requirement: Based on the assignment details and your design, draw
a sequence diagram of the HDB's officer's own application - starting from
eligibility check to successfully booked and become a HDB officer of another
project.
Choose your own complicated use case as additional SD.
Q: Can I also confirm if we need to differentiate between the boundary,
control and entity classes or just regular shapes is sufficient.
Ans: No mandatory. You may decide if you would like to demonstrate your
knowledge.
Q: Are we required to apply all five principles to every class, or is it
sufficient to demonstrate each principle at least once across different
classes in the project?
Ans: It is sufficient to demonstrate each principle at least once across different
classes in the project.
Q: 1. Would adhering to these principles be a requirement, or is it
optional as long as the solution is functional?
Ans: It is a requirement.
Q: Are we required to incorporate all five SOLID principles into our
project, or can we selectively implement some?
a. Is there a recommended number of principles that we should aim
to incorporate?
Ans: Need all 5.
Q: For the usage of OO concepts and principles mentioned in Design
Considerations, is it recommended that we make use of all the concepts
taught (e.g. down casting, polymorphism, etc.) ?
Ans: Not mandatory.
Q: In the brief for the SC2002 group assignment, the deliverables say to
prepare only 1 Sequence diagram; specifically the use case "Showing the
flow of the HDB Officer’s role in applying for a BTO and register to handle
a project."
However in the recording of your week 9 lecture, you mentioned that
you'd recommend at least 2 - 3 sequence diagrams. Can I check which is
the correct set of requirements?
Ans: That one is the minimum requirement. I would like to encourage you to work on 2-3 based
on your selected test case.

Q: Do we need to strictly follow the order, properties and
names of the data columns in the supplied .xlsx files or can we
introduce new data columns in our own implementation?
Ans: You can include new data columns in
your own implementation.
Q: Are we allowed to change the excel file format from .xlsx to
.csv? This is because it is easier to retrieve and write data to .csv
files. The project PDF only mentioned no JSON/XML format
allowed.
Ans: You are allowed to change the excel file
format from .xlsx to .csv.
Q: Are we allowed to use design patterns such as
Singletons in our solution?
Ans: Yes. You can use design patterns.
Q: Can we import any external libraries to aid our
solution, or are there any specific restrictions on this?
Ans: It depends on which library you want to import. The
libraries for data management are not allowed.
Applicants
Q1. When an applicant views a
project, is it expected that they see
the number of available units?
A: Yes.
Q2. Should a single applicant be
able to view 3-Room unit details
(e.g., unit number and price) in the
"View Projects" section?
A: Applicants can only view the list
of projects that are open to their
user group (Single or Married). The
current design hides 3-Room details
from single applicants.
Q3. When a single applicant applies
for a project, should the system
automatically set the flat type to 2-
Room (without offering a choice for
3-Room)?
A: Yes. Applicants can only apply for
projects they are able to view. No
viewing rights = Not eligible to apply
= Cannot apply.
Q4. Once an enquiry has been
replied to, should the applicant still
be able to edit or delete it?
A: No. Once replied, the enquiry
should not be editable or deletable
by the applicant.
Q5. Is it required to include a
timestamp for each enquiry (and its
reply)?
A: You may decide based on your
design.
Q6. If a project has zero available
units for 2-Room flats, should the
system still display that project to
single applicants?
A: You may decide based on your
design. You can either simply show
no available flats or show those
taken flats for their reference.
For Officers
Q1. Can an officer unregister
(cancel their registration) for a
project after registering?
A: No.
Q2. When officers reply to enquiries,
do we need to capture additional
details such as a timestamp and the
officer’s name?
A: You may decide.
Q3. Should receipt generation be available only for
applications with a successful (BOOKED) outcome, and only
include applicants under the officer’s own project?
A: Yes. Receipts should only be generated when the
application status changes from SUCCESSFUL to BOOK.
Only the HDB officer handling the project can update the
status for applicants booking a unit in that same project.
For Managers
Q1. When creating a project, must the project name be
unique? (We are currently not using a unique project ID.)
A: Yes, the project name should be unique.
Q2. Regarding the application period (opening and closing
dates): How does the system determine if a project is open
or closed?
A: The system will use the current date. Design your demo
to reflect this.
Q3. Should a project automatically close when the closing
date is reached? What should happen to the project after
that?
A: Yes. After the closing date, the project should no longer
be visible for new applications. However, applicants who
have already applied should still be able to see the project
listing. What happens beyond that can be based on your
design.
Q4. Our sample data includes projects with past dates.
Should we assume those projects are still open?
A: You may change the sample dates as needed to suit
what you want to showcase in your demo.
For Filtering
Q1. Is it acceptable to use a searchable interface to filter by
criteria such as neighborhood, flat type, marital status, age
range, and price sorting?
A: Yes, that is acceptable.
Data files
Q: Regarding CSV file usage:
- Should CSV files be used only for initial system setup
(importing initial staff list and project list as mentioned in the
requirements)?
- Or can CSV files also serve as a persistent data store
throughout program execution, where we can read and write
user data during runtime? This will ensure the changes to be
saved even after the program terminates.
Ans: Used for both.
Q: Is it required for our project to save information between
executions (data persistence)?
Ans: Yes. Unless you have justification for a different design.
Design
Q: SOLID Principles: As we are adhering to the SOLID
principles, we have noticed that the number of our interfaces
and classes is increasing to maintain specificity. Is this
acceptable? Additionally, when justifying our application of the
SOLID principles in the report, should we list every instance of
usage or only a few key examples?
Yes. only a few key examples will do.
Q: Can I clarify whether we have to read/write to the original
xlsx files given? Or can we just use the data and read/write
using our own formats?
Ans: Yes. You can define your own format.
Q: How strict is the input checking for the project? Will test
cases intentionally include invalid inputs to check how the
system handles them, or is the focus primarily on standard
valid inputs?
Ans: Input validation is a must.
Q: For the project presentation, do we have to create
slides or can we do it on google collabs/ Jupyter
Notebook like how it is done in SC1003?
Ans: There are no restrictions on the presentation style as long as it
effectively showcases your work.
Q: May I clarify what these 2 bullet
points mean? My group is confused as
we feel that they are contradictory to
each other (ie first bullet point said
"not allowed to edit project details",
while the second bullet point talked
about updating details such as
remaining flats).
Ans: Only manager can edit details, e.g., location, number of flats in
each category. HDB Officer has the rights to manually change the
application status to "Booked" for the successful applicant. Updating
count, updating Applications Profile and generating booking details
mainly should be done automatically by the system.
Under the section for HDB manager, the handling of one project “during an
application period” seems unclear as it does not specify what consists
under “handling a project”.
As there is an application period for each HDB BTO project, we were
confused whether a HDB manager no longer touches a project after the
project application period, as approving and rejecting applications for the
project seems to be considered under “handling a project”, and it makes
more sense that this only happens after the application deadline is over.
So, does this mean that there are multiple projects with overlapping
application timelines, and a HDB manager can only take one “active”
project at a time when its applications are open, but can still handle
multiple projects after the application deadline, such as approving
applications and rejecting withdrawals and handling enquiries (eg. handle 3
projects from the past with visibility off and only 1 project with visibility on
currently)
Ans: A HDB manager can only take one “active” project at a time
when its applications are open, but can still handle
multiple projects after the application deadline, such as approving
applications and rejecting withdrawals and handling enquiries (eg.
handle 3 projects from the past with visibility off and only 1 project
with visibility on currently).
HDB Manager will not be able to create a new project if he/she
already has an active project within the application period.
Definition of "Active": Visibility turned ON + Within application
period (application start date to application end date, both
inclusive)
Q1. How should enquiries work? Suppose an applicant has
multiple enquiries—should they submit multiple separate
enquiries, or should it be treated like a conversation/chat?
A: No, it should not be treated like a conversation/chat. If
an applicant has multiple enquiries, they must submit
multiple separate enquiries.
Q2. What should happen to applications with approved
withdrawals? Should the application be deleted (i.e., no
longer visible to the applicant), marked as "Unsuccessful",
or handled differently?
A: If a withdrawal is approved after the application was
successful, the status should be changed to
"Unsuccessful". However, the applicant should still be able
to view the project. As long as an application was
submitted, the applicant will be able to see the project
listing—regardless of its current visibility or the application
status.
Q3. Regarding the requirement: “With Applicant’s
successful BTO application, HDB Officer’s flat selection
responsibilities”—should actions such as updating the unit
count, changing the status to "Booked", and updating the
Application Profile be performed automatically, or
manually by the HDB Officer?
A: The HDB Officer must manually change the application
status to "Booked". Once that is done, the system can
automatically handle updates such as unit count
adjustment, Application Profile update, and generation of
booking details.
Q4. When HDB Officers update application statuses, must the status
transitions follow a specific order (e.g., Pending → Success → Booked),
or can they skip or revert statuses (e.g., Pending → Booked or Success
→ Pending)?
A: Status transitions must follow a defined order:
•Valid: Pending → Success → Booked
•Not allowed: Pending → Booked or Success → Pending
•For unsuccessful applications: Pending → Unsuccessful
•For withdrawals before booking: Pending → Success → Unsuccessful
•For withdrawals after booking: Pending → Success → Booked →
Unsuccessful
Q5. Regarding the requirement: “Able to generate receipt of the
applicants with their respective flat booking details – Applicant’s Name,
NRIC, age, marital status, flat type booked and its project details” —
should this receipt be generated automatically upon status change to
"Booked"?
A: The HDB Officer must manually change the status to "Booked".
After that, the system can automatically handle the generation of
booking details and receipt, along with updating the unit count and the
Application Profile.
Q6. Regarding the rule “Can only be handling one project within an
application period (from application opening date to closing date)”, if
an HDB Manager is already managing an active project, can they create
another project during the same application period?
A: No, an HDB Manager cannot create a new project if they are already
managing another project that is active within the same application
period.
Q7. The specification says HDB Managers are “Able to view enquiries
of ALL projects.” Does this include projects they are not managing?
A: Yes, HDB Managers can view enquiries for all projects, including
those that they do not manage.
Q8. Regarding the requirement “Highlight clearly any additional
features/functionalities implemented in the system” (from section 5c),
how will this be factored into grading?
A: Marks will be awarded for innovation and creativity. Any additional
features or functionalities added to the system will contribute to the
overall grade based on their usefulness and originality.
Report
Q: For the report for our group project, could you
confirm which platform we should use (MS Word,
PowerPoint, Jupyter Notebook, etc).
Ans: MS Word.
Q: Our team's UML diagram is quite big to fit on an A4
size page. The details might be very small or blurry. I just
want to double confirm with you if we attach our UML
diagram in a separate PDF file with a better resolution.
Ans: Yes. Can.
---
